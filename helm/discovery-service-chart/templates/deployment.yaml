{{- if .Values.deployment.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    {{- include "application.labels" $ | nindent 4 }}
    {{- if and (hasKey .Values.deployment "additionalLabels") .Values.deployment.additionalLabels }}
    {{- toYaml .Values.deployment.additionalLabels | nindent 4 }}
    {{- end }}
  {{- with .Values.deployment }}
    {{- if or .annotations .reloadOnChange }}
  annotations:
      {{- if .annotations }}
    {{- toYaml .annotations | nindent 4 }}
      {{- end }}
      {{- if .reloadOnChange }}
    reloader.stakater.com/auto: "true"
      {{- end }}
    {{- end }}
  {{- end }}
  name: {{ template "application.name" . }}
  namespace: {{ include "application.namespace" . }}
spec:
  {{- if and (hasKey .Values.deployment "replicas") (not (eq .Values.deployment.replicas nil)) }}
  replicas: {{ .Values.deployment.replicas }}
  {{- end }}
  selector:
    matchLabels:
{{ include "application.selectorLabels" . | indent 6 }}
  {{- if and (hasKey .Values.deployment "strategy") .Values.deployment.strategy }}
  strategy:
{{ toYaml .Values.deployment.strategy | indent 4 }}
  {{- end }}
  {{- if and (hasKey .Values.deployment "revisionHistoryLimit") (not (kindIs "invalid" .Values.deployment.revisionHistoryLimit)) }}
  revisionHistoryLimit: {{ .Values.deployment.revisionHistoryLimit }}
  {{- end }}
  template:
    metadata:
      labels:
{{ include "application.selectorLabels" . | indent 8 }}
      {{- if and (hasKey .Values.deployment "podLabels") .Values.deployment.podLabels }}
{{ toYaml .Values.deployment.podLabels | indent 8 }}
      {{- end }}
      {{- if or (and (hasKey .Values.deployment "additionalPodAnnotations") .Values.deployment.additionalPodAnnotations) (and (hasKey .Values.deployment "fluentdConfigAnnotations") .Values.deployment.fluentdConfigAnnotations) }}
      annotations:
      {{- end }}
      {{- if and (hasKey .Values.deployment "additionalPodAnnotations") .Values.deployment.additionalPodAnnotations }}
{{ toYaml .Values.deployment.additionalPodAnnotations | indent 8 }}
      {{- end }}
      {{- if and (hasKey .Values.deployment "fluentdConfigAnnotations") .Values.deployment.fluentdConfigAnnotations }}
        fluentdConfiguration: >
          [
            {
              "containers":
              [
                {
                  "expressionFirstLine": {{ if hasKey .Values.deployment.fluentdConfigAnnotations "regexFirstLine" }}"{{ .Values.deployment.fluentdConfigAnnotations.regexFirstLine }}"{{ else }}""{{ end }},
                  "expression": {{ if hasKey .Values.deployment.fluentdConfigAnnotations "regex" }}"{{ .Values.deployment.fluentdConfigAnnotations.regex }}"{{ else }}""{{ end }},
                  "timeFormat": {{ if hasKey .Values.deployment.fluentdConfigAnnotations "timeFormat" }}"{{ .Values.deployment.fluentdConfigAnnotations.timeFormat }}"{{ else }}""{{ end }},
                  "containerName": "{{ template "application.name" . }}"
                }
              ]
              {{- if and (hasKey .Values.deployment.fluentdConfigAnnotations "notifications") .Values.deployment.fluentdConfigAnnotations.notifications }}
              , "notifications": {
                {{- if and (hasKey .Values.deployment.fluentdConfigAnnotations.notifications "slack") .Values.deployment.fluentdConfigAnnotations.notifications.slack }}
                "slack": {
                  "webhookURL": {{ if hasKey .Values.deployment.fluentdConfigAnnotations.notifications.slack "webhookURL" }}"{{ .Values.deployment.fluentdConfigAnnotations.notifications.slack.webhookURL }}"{{ else }}""{{ end }},
                  "channelName": {{ if hasKey .Values.deployment.fluentdConfigAnnotations.notifications.slack "channelName" }}"{{ .Values.deployment.fluentdConfigAnnotations.notifications.slack.channelName }}"{{ else }}""{{ end }}
                },
                {{- end }}
                "key": {{ if hasKey .Values.deployment.fluentdConfigAnnotations.notifications "key" }}"{{ .Values.deployment.fluentdConfigAnnotations.notifications.key }}"{{ else }}""{{ end }},
                "pattern": {{ if hasKey .Values.deployment.fluentdConfigAnnotations.notifications "pattern" }}"{{ .Values.deployment.fluentdConfigAnnotations.notifications.pattern }}"{{ else }}""{{ end }}
              }
              {{- end }}
            }
          ]
      {{- end }}
    spec:
      {{- if and (hasKey .Values.deployment "hostAliases") .Values.deployment.hostAliases }}
      hostAliases:
{{ toYaml .Values.deployment.hostAliases | indent 6 }}
      {{- end }}
      {{- if and (hasKey .Values.deployment "initContainers") .Values.deployment.initContainers }}
      initContainers:
      {{- range $key, $value := .Values.deployment.initContainers }}
      - name: {{ $key }}
{{ include "application.tplvalues.render" ( dict "value" $value "context" $ ) | indent 8 }}
      {{- end }}
      {{- end }}
      {{- if and (hasKey .Values.deployment "nodeSelector") .Values.deployment.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.deployment.nodeSelector | indent 8 }}
      {{- end }}
      {{- if and (hasKey .Values.deployment "priorityClassName") .Values.deployment.priorityClassName }}
      priorityClassName: {{ .Values.deployment.priorityClassName }}
      {{- end }}
      {{- if and (hasKey .Values.deployment "tolerations") .Values.deployment.tolerations }}
      tolerations:
{{ toYaml .Values.deployment.tolerations | indent 8 }}
      {{- end }}
      {{- if and (hasKey .Values.deployment "affinity") .Values.deployment.affinity }}
      affinity:
{{ toYaml .Values.deployment.affinity | indent 8 }}
      {{- end }}
      {{- if and (hasKey .Values.deployment "topologySpreadConstraints") .Values.deployment.topologySpreadConstraints }}
      topologySpreadConstraints:
{{ toYaml .Values.deployment.topologySpreadConstraints | indent 8 }}
      {{- end }}
      {{- if and (hasKey .Values.deployment "imagePullSecrets") .Values.deployment.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.deployment.imagePullSecrets | indent 8 }}
      {{- end }}
      containers:
        {{- if and (hasKey .Values.deployment "openshiftOAuthProxy") (hasKey .Values.deployment.openshiftOAuthProxy "enabled") .Values.deployment.openshiftOAuthProxy.enabled }}
        - args:
          {{- if and (hasKey .Values.deployment.openshiftOAuthProxy "disableTLSArg") .Values.deployment.openshiftOAuthProxy.disableTLSArg }}
          - --http-address=:8081
          {{- else }}
          - --https-address=:8443
          {{- end }}
          - --provider=openshift
          - --upstream={{ if hasKey .Values.deployment.openshiftOAuthProxy "port" }}http://localhost:{{ .Values.deployment.openshiftOAuthProxy.port }}{{ else }}http://localhost:8080{{ end }}
          - --openshift-service-account={{ template "application.name" . }}
          - --tls-cert=/etc/tls/private/tls.crt
          - --tls-key=/etc/tls/private/tls.key
          - --cookie-secret=SECRET
          image: {{ if hasKey .Values.deployment.openshiftOAuthProxy "image" }}{{ .Values.deployment.openshiftOAuthProxy.image }}{{ else }}"openshift/oauth-proxy:latest"{{ end }}
          imagePullPolicy: {{ if hasKey .Values.deployment.openshiftOAuthProxy "imagePullPolicy" }}{{ .Values.deployment.openshiftOAuthProxy.imagePullPolicy }}{{ else }}"IfNotPresent"{{ end }}
          name: oauth-proxy
          ports:
          {{- if and (hasKey .Values.deployment.openshiftOAuthProxy "disableTLSArg") .Values.deployment.openshiftOAuthProxy.disableTLSArg }}
          - containerPort: 8081
          {{- else }}
          - containerPort: 8443
          {{- end }}
            name: proxy
          volumeMounts:
          - mountPath: /etc/tls/private
            name: proxy-tls
        {{- end }}
        - name: {{ template "application.name" . }}
        {{- $image := required "Undefined image for application container" .Values.deployment.image.repository }}
        {{- if and (hasKey .Values.deployment.image "tag") .Values.deployment.image.tag }}
        {{- $image = print $image ":" .Values.deployment.image.tag }}
        {{- end }}
        {{- if and (hasKey .Values.deployment.image "digest") .Values.deployment.image.digest }}
        {{- $image = print $image "@" .Values.deployment.image.digest }}
        {{- end }}
        image: {{ $image }}
        imagePullPolicy: {{ if hasKey .Values.deployment.image "pullPolicy" }}{{ .Values.deployment.image.pullPolicy }}{{ else }}"IfNotPresent"{{ end }}
        {{- if and (hasKey .Values.deployment "lifecycle") .Values.deployment.lifecycle }}
        lifecycle:
{{ toYaml .Values.deployment.lifecycle | indent 10 }}
        {{- end }}
        {{- if and (hasKey .Values.deployment "command") .Values.deployment.command }}
        command: {{- include "application.tplvalues.render" (dict "value" .Values.deployment.command "context" $) | nindent 12 }}
        {{- end }}
        {{- if and (hasKey .Values.deployment "args") .Values.deployment.args }}
        args: {{- include "application.tplvalues.render" (dict "value" .Values.deployment.args "context" $) | nindent 12 }}
        {{- end }}
        {{- if and (hasKey .Values.deployment "ports") .Values.deployment.ports }}
        ports:
{{ toYaml .Values.deployment.ports | indent 10 }}
        {{- end }}
        {{- if and (hasKey .Values.deployment "envFrom") .Values.deployment.envFrom }}
        envFrom:
        {{- range $value := .Values.deployment.envFrom }}
        {{- if and (hasKey $value "type") (eq $value.type "configmap") }}
        - configMapRef:
            {{- if and (hasKey $value "name") $value.name }}
            name: {{ include "application.tplvalues.render" ( dict "value" $value.name "context" $ ) }}
            {{- else if and (hasKey $value "nameSuffix") $value.nameSuffix }}
            name: {{ template "application.name" $ }}-{{ include "application.tplvalues.render" ( dict "value" $value.nameSuffix "context" $ ) }}
            {{- else }}
            name: {{ template "application.name" $ }}
            {{- end }}
        {{- end }}
        {{- if and (hasKey $value "type") (eq $value.type "secret") }}
        - secretRef:
            {{- if and (hasKey $value "name") $value.name }}
            name: {{ include "application.tplvalues.render" ( dict "value" $value.name "context" $ ) }}
            {{- else if and (hasKey $value "nameSuffix") $value.nameSuffix }}
            name: {{ template "application.name" $ }}-{{ include "application.tplvalues.render" ( dict "value" $value.nameSuffix "context" $ ) }}
            {{- else }}
            name: {{ template "application.name" $ }}
            {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- if and (hasKey .Values.deployment "env") .Values.deployment.env }}
        env:
        {{- range $key, $value := .Values.deployment.env }}
        - name: {{ $key | quote }}
          value: {{ $value | quote }}
        {{- end }}
        {{- end }}
        {{- if and (hasKey .Values.deployment "startupProbe") (hasKey .Values.deployment.startupProbe "enabled") .Values.deployment.startupProbe.enabled }}
        startupProbe:
          failureThreshold: {{ if hasKey .Values.deployment.startupProbe "failureThreshold" }}{{ .Values.deployment.startupProbe.failureThreshold }}{{ else }}3{{ end }}
          periodSeconds: {{ if hasKey .Values.deployment.startupProbe "periodSeconds" }}{{ .Values.deployment.startupProbe.periodSeconds }}{{ else }}10{{ end }}
          successThreshold: {{ if hasKey .Values.deployment.startupProbe "successThreshold" }}{{ .Values.deployment.startupProbe.successThreshold }}{{ else }}1{{ end }}
          timeoutSeconds: {{ if hasKey .Values.deployment.startupProbe "timeoutSeconds" }}{{ .Values.deployment.startupProbe.timeoutSeconds }}{{ else }}1{{ end }}
          initialDelaySeconds: {{ if hasKey .Values.deployment.startupProbe "initialDelaySeconds" }}{{ .Values.deployment.startupProbe.initialDelaySeconds }}{{ else }}0{{ end }}
          {{- if and (hasKey .Values.deployment.startupProbe "exec") .Values.deployment.startupProbe.exec }}
          exec:
{{ toYaml .Values.deployment.startupProbe.exec | indent 12 }}
          {{- else if and (hasKey .Values.deployment.startupProbe "httpGet") .Values.deployment.startupProbe.httpGet }}
          httpGet:
{{ toYaml .Values.deployment.startupProbe.httpGet | indent 12 }}
          {{- else if and (hasKey .Values.deployment.startupProbe "tcpSocket") .Values.deployment.startupProbe.tcpSocket }}
          tcpSocket:
{{ toYaml .Values.deployment.startupProbe.tcpSocket | indent 12 }}
          {{- else if and (hasKey .Values.deployment.startupProbe "grpc") .Values.deployment.startupProbe.grpc }}
          grpc:
{{ toYaml .Values.deployment.startupProbe.grpc | indent 12 }}
          {{- end }}
        {{- end }}
        {{- if and (hasKey .Values.deployment "livenessProbe") (hasKey .Values.deployment.livenessProbe "enabled") .Values.deployment.livenessProbe.enabled }}
        livenessProbe:
          failureThreshold: {{ if hasKey .Values.deployment.livenessProbe "failureThreshold" }}{{ .Values.deployment.livenessProbe.failureThreshold }}{{ else }}3{{ end }}
          periodSeconds: {{ if hasKey .Values.deployment.livenessProbe "periodSeconds" }}{{ .Values.deployment.livenessProbe.periodSeconds }}{{ else }}10{{ end }}
          successThreshold: {{ if hasKey .Values.deployment.livenessProbe "successThreshold" }}{{ .Values.deployment.livenessProbe.successThreshold }}{{ else }}1{{ end }}
          timeoutSeconds: {{ if hasKey .Values.deployment.livenessProbe "timeoutSeconds" }}{{ .Values.deployment.livenessProbe.timeoutSeconds }}{{ else }}1{{ end }}
          initialDelaySeconds: {{ if hasKey .Values.deployment.livenessProbe "initialDelaySeconds" }}{{ .Values.deployment.livenessProbe.initialDelaySeconds }}{{ else }}0{{ end }}
          {{- if and (hasKey .Values.deployment.livenessProbe "exec") .Values.deployment.livenessProbe.exec }}
          exec:
{{ toYaml .Values.deployment.livenessProbe.exec | indent 12 }}
          {{- else if and (hasKey .Values.deployment.livenessProbe "httpGet") .Values.deployment.livenessProbe.httpGet }}
          httpGet:
{{ toYaml .Values.deployment.livenessProbe.httpGet | indent 12 }}
          {{- else if and (hasKey .Values.deployment.livenessProbe "tcpSocket") .Values.deployment.livenessProbe.tcpSocket }}
          tcpSocket:
{{ toYaml .Values.deployment.livenessProbe.tcpSocket | indent 12 }}
          {{- else if and (hasKey .Values.deployment.livenessProbe "grpc") .Values.deployment.livenessProbe.grpc }}
          grpc:
{{ toYaml .Values.deployment.livenessProbe.grpc | indent 12 }}
          {{- end }}
        {{- end }}
        {{- if and (hasKey .Values.deployment "readinessProbe") (hasKey .Values.deployment.readinessProbe "enabled") .Values.deployment.readinessProbe.enabled }}
        readinessProbe:
          failureThreshold: {{ if hasKey .Values.deployment.readinessProbe "failureThreshold" }}{{ .Values.deployment.readinessProbe.failureThreshold }}{{ else }}3{{ end }}
          periodSeconds: {{ if hasKey .Values.deployment.readinessProbe "periodSeconds" }}{{ .Values.deployment.readinessProbe.periodSeconds }}{{ else }}10{{ end }}
          successThreshold: {{ if hasKey .Values.deployment.readinessProbe "successThreshold" }}{{ .Values.deployment.readinessProbe.successThreshold }}{{ else }}1{{ end }}
          timeoutSeconds: {{ if hasKey .Values.deployment.readinessProbe "timeoutSeconds" }}{{ .Values.deployment.readinessProbe.timeoutSeconds }}{{ else }}1{{ end }}
          initialDelaySeconds: {{ if hasKey .Values.deployment.readinessProbe "initialDelaySeconds" }}{{ .Values.deployment.readinessProbe.initialDelaySeconds }}{{ else }}0{{ end }}
          {{- if and (hasKey .Values.deployment.readinessProbe "exec") .Values.deployment.readinessProbe.exec }}
          exec:
{{ toYaml .Values.deployment.readinessProbe.exec | indent 12 }}
          {{- else if and (hasKey .Values.deployment.readinessProbe "httpGet") .Values.deployment.readinessProbe.httpGet }}
          httpGet:
{{ toYaml .Values.deployment.readinessProbe.httpGet | indent 12 }}
          {{- else if and (hasKey .Values.deployment.readinessProbe "tcpSocket") .Values.deployment.readinessProbe.tcpSocket }}
          tcpSocket:
{{ toYaml .Values.deployment.readinessProbe.tcpSocket | indent 12 }}
          {{- else if and (hasKey .Values.deployment.readinessProbe "grpc") .Values.deployment.readinessProbe.grpc }}
          grpc:
{{ toYaml .Values.deployment.readinessProbe.grpc | indent 12 }}
          {{- end }}
        {{- end }}
        {{- if or (and (hasKey .Values.deployment "volumeMounts") .Values.deployment.volumeMounts) (and (hasKey .Values "persistence") (hasKey .Values.persistence "enabled") .Values.persistence.enabled (hasKey .Values.persistence "mountPVC") .Values.persistence.mountPVC) }}
        volumeMounts:
        {{- if and (hasKey .Values "persistence") (hasKey .Values.persistence "enabled") .Values.persistence.enabled (hasKey .Values.persistence "mountPVC") .Values.persistence.mountPVC }}
        - mountPath: {{ .Values.persistence.mountPath }}
          name: {{ template "application.name" . }}-data
        {{- end }}
        {{- if and (hasKey .Values.deployment "volumeMounts") .Values.deployment.volumeMounts }}
        {{- range $key, $value := .Values.deployment.volumeMounts }}
        - name: {{ $key }}
{{ include "application.tplvalues.render" ( dict "value" $value "context" $ ) | indent 10 }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- if and (hasKey .Values.deployment "resources") .Values.deployment.resources }}
        resources:
{{ toYaml .Values.deployment.resources | indent 10 }}
        {{- end }}
        {{- if and (hasKey .Values.deployment "containerSecurityContext") .Values.deployment.containerSecurityContext }}
        securityContext:
{{ toYaml .Values.deployment.containerSecurityContext | indent 10 }}
        {{- end }}
        {{- if and (hasKey .Values.deployment "additionalContainers") .Values.deployment.additionalContainers }}
{{ toYaml .Values.deployment.additionalContainers | indent 6 }}
        {{- end }}
        {{- if and (hasKey .Values.deployment "securityContext") .Values.deployment.securityContext }}
      securityContext:
{{ toYaml .Values.deployment.securityContext | indent 8 }}
        {{- end }}
        {{- if and (hasKey .Values.deployment "dnsConfig") .Values.deployment.dnsConfig }}
      dnsConfig:
{{ toYaml .Values.deployment.dnsConfig | indent 8 }}
        {{- end }}
        {{- if and (hasKey .Values.deployment "dnsPolicy") .Values.deployment.dnsPolicy }}
      dnsPolicy: {{ .Values.deployment.dnsPolicy }}
        {{- end }}
        {{- if or (and (hasKey .Values.deployment "openshiftOAuthProxy") (hasKey .Values.deployment.openshiftOAuthProxy "enabled") .Values.deployment.openshiftOAuthProxy.enabled) (and (hasKey .Values.deployment "volumes") .Values.deployment.volumes) (and (hasKey .Values "persistence") (hasKey .Values.persistence "enabled") .Values.persistence.enabled (hasKey .Values.persistence "mountPVC") .Values.persistence.mountPVC) }}
      volumes:
        {{- if and (hasKey .Values.deployment "openshiftOAuthProxy") (hasKey .Values.deployment.openshiftOAuthProxy "enabled") .Values.deployment.openshiftOAuthProxy.enabled }}
        - name: proxy-tls
          secret:
            secretName: {{ if hasKey .Values.deployment.openshiftOAuthProxy "secretName" }}{{ .Values.deployment.openshiftOAuthProxy.secretName }}{{ else }}"oauth-proxy-secret"{{ end }}
        {{- end }}
        {{- if and (hasKey .Values "persistence") (hasKey .Values.persistence "enabled") .Values.persistence.enabled (hasKey .Values.persistence "mountPVC") .Values.persistence.mountPVC }}
        - name: {{ template "application.name" . }}-data
          persistentVolumeClaim:
            {{- if and (hasKey .Values.persistence "name") .Values.persistence.name }}
            claimName: {{ .Values.persistence.name }}
            {{- else }}
            claimName: {{ template "application.name" . }}-data
            {{- end }}
        {{- end }}
        {{- if and (hasKey .Values.deployment "volumes") .Values.deployment.volumes }}
        {{- range $key, $value := .Values.deployment.volumes }}
        - name: {{ $key }}
{{ include "application.tplvalues.render" ( dict "value" $value "context" $ ) | indent 8 }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- if and (hasKey .Values "rbac") (hasKey .Values.rbac "serviceAccount") (hasKey .Values.rbac.serviceAccount "enabled") .Values.rbac.serviceAccount.enabled }}
        {{- if and (hasKey .Values.rbac.serviceAccount "name") .Values.rbac.serviceAccount.name }}
      serviceAccountName: {{ .Values.rbac.serviceAccount.name }}
        {{- else }}
      serviceAccountName: {{ template "application.name" $ }}
        {{- end }}
        {{- end }}
        {{- if and (hasKey .Values.deployment "hostNetwork") .Values.deployment.hostNetwork }}
      hostNetwork: {{ .Values.deployment.hostNetwork }}
        {{- end }}
      terminationGracePeriodSeconds: {{ if hasKey .Values.deployment "terminationGracePeriodSeconds" }}{{ .Values.deployment.terminationGracePeriodSeconds }}{{ else }}30{{ end }}
{{- end }}